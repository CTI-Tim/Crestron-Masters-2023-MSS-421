/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Pure AV, a RICOH Company
System Name: Crestron Web Services - Simple Keypad Example
System Number: Initial Release
Programmer: CDH
Comments: A minimal implementation of Crestron Web Services to provide an interface for a simple keypad.
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

 #SYMBOL_NAME "MSS-421 Simple Keypad Example"
 #HINT "Requires SimplWindowsCWSKeypad.clz"

 // The maximum number of buttons to support.
 #DEFINE_CONSTANT MaxButtons 100
          
 // Pulse time of 1/10 second.
 #DEFINE_CONSTANT PulseTime 10
 
 // The maximum path length for the path parameter.
 #DEFINE_CONSTANT MaxPathLength 255

 // Device Interface.
 #CATEGORY "4" 
 // 
 #DEFAULT_VOLATILE


#HELP_BEGIN
Crestron Masters 2023 - MSS-421 - Simple Keypad Example.

A minimal implementation of the CWS class to provide an api
for pulsing DIGITAL_OUTPUTs via HTTP(S) requests.

The user can trigger the digital output Button[x] by using the following URLs

For VC-4 / VC-4-PC3:
https://[hostname]/VirtualControl/Rooms/[Room ID]/cws/[path]/button/[x]

For all other processors:
https://[hostname]/cws/[path]/button/[x]

Example:
curl https://192.168.1.10/cws/keypad/button/5
Will pulse the digital_output Button[5]
#HELP_END
  
/*******************************************************************************************
  Include Libraries
*******************************************************************************************/

 // Add a reference to the example web service Simpl# library.
 #USER_SIMPLSHARP_LIBRARY "SimplWindowsCwsKeypad"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
*******************************************************************************************/
 
 // Array of buttons to pulse as requested by the CWS keypad API.
 DIGITAL_OUTPUT _skip_,Button[MaxButtons];

/*******************************************************************************************
  Simpl# Classes
*******************************************************************************************/

 // Declare a new instance of the CwsKeypadExample class.
 CwsKeypadExample keypad;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

 // Keeps track of the number of active output signals that have been defined in this program
 INTEGER Outputs;

/*******************************************************************************************
  Parameters
*******************************************************************************************/

 // The base path for the cws server instance.
 STRING_PARAMETER Path[MaxPathLength];

/*******************************************************************************************
  Parameter Properties
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES Path
    propValidUnits = unitString;
    propDefaultUnit = unitString;
    propDefaultValue = "/keypad/";
    propShortDescription = "The unique base path to register with the CWS Server";
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

// Finds the active (connected) signal count for the 'Button' digital_output array.
Function GetButtonCount()
{
	FOR(Outputs = MaxButtons to 1 Step -1)
		IF(IsSignalDefined(Button[Outputs]))
     		Break;
}

/*******************************************************************************************
  Simpl# Event Handlers
*******************************************************************************************/

// EventHandler to receive the index of the button to be pressed from the CWS api.
eventhandler OnButtonPressed(CwsKeypadExample sender, SimplPlusButtonEventArgs args){
	// Check that the value is greater than zero and a valid (defined) button index.
	if(args.Index > 0 && args.Index <= Outputs)	{
		// Pulse the button at the received index for the specified pulse time.
		Pulse(PulseTime,Button[args.Index]);
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	// Find the active / defined signal output count.
	GetButtonCount();
    // Register the button pressed event with the Simpl# class.
 	RegisterEvent(keypad,ButtonPressed,OnButtonPressed);
    // Initialise the keypad instance and pass the server path.
	keypad.Initialise(Path);
}
